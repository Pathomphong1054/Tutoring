import 'package:flutter/material.dart';
import 'package:table_calendar/table_calendar.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'chat_screen.dart';

class TutoringScheduleScreen extends StatefulWidget {
  final String tutorName;
  final String tutorImage;

  TutoringScheduleScreen({required this.tutorName, required this.tutorImage});

  @override
  _TutoringScheduleScreenState createState() => _TutoringScheduleScreenState();
}

class _TutoringScheduleScreenState extends State<TutoringScheduleScreen> {
  DateTime? selectedDay;
  TimeOfDay? startTime;
  TimeOfDay? endTime;
  int selectedRate = 1;
  TextEditingController startTimeController = TextEditingController();
  TextEditingController endTimeController = TextEditingController();

  List<Map<String, dynamic>> rates = [
    {'people': 1, 'price': 200},
    {'people': 2, 'price': 500},
    {'people': 3, 'price': 700}
  ];

  CalendarFormat _calendarFormat = CalendarFormat.month;
  DateTime _focusedDay = DateTime.now();

  Future<void> _selectTime(BuildContext context, bool isStartTime) async {
    final timePicked = await showTimePicker(
      context: context,
      initialTime: isStartTime ? startTime ?? TimeOfDay(hour: 13, minute: 0) : endTime ?? TimeOfDay(hour: 15, minute: 0),
    );

    if (timePicked != null) {
      setState(() {
        if (isStartTime) {
          startTime = timePicked;
          startTimeController.text = startTime!.format(context);
        } else {
          endTime = timePicked;
          endTimeController.text = endTime!.format(context);
        }
      });
    }
  }

  Future<void> _scheduleSession() async {
    if (selectedDay != null && startTime != null && endTime != null) {
      final response = await http.post(
        Uri.parse('http://10.5.50.84/tutoring_app/schedule_session.php'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({
          'student': 'student1', // Replace with actual student username
          'tutor': widget.tutorName,
          'date': selectedDay.toString(),
          'startTime': startTime!.format(context),
          'endTime': endTime!.format(context),
          'rate': selectedRate,
        }),
      );

      print('Schedule Session Response: ${response.body}');

      if (response.statusCode == 200) {
        final responseData = json.decode(response.body);
        if (responseData['status'] == 'success') {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Session scheduled successfully')),
          );
          // Send message to tutor
          await _sendMessageToTutor();
          Navigator.pop(context); // Go back after scheduling
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Failed to schedule session: ${responseData['message']}')),
          );
        }
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to schedule session: ${response.body}')),
        );
      }
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Please select a day and time')),
      );
    }
  }

  Future<void> _sendMessageToTutor() async {
    final message = 'A new tutoring session has been scheduled with you on ${selectedDay.toString()} from ${startTime!.format(context)} to ${endTime!.format(context)}.';

    final response = await http.post(
      Uri.parse('http://10.5.50.84/tutoring_app/send_message.php'),
      headers: {'Content-Type': 'application/json'},
      body: json.encode({
        'sender': 'student1', // Replace with actual student username
        'recipient': widget.tutorName,
        'message': message,
      }),
    );

    print('Send Message Response: ${response.body}');

    if (response.statusCode == 200) {
      final responseData = json.decode(response.body);
      if (responseData['status'] == 'success') {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Message sent to tutor')),
        );
        // Navigate to ChatScreen with the tutor
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => ChatScreen(
              currentUser: 'student1', // Replace with actual student username
              recipient: widget.tutorName,
              recipientImage: widget.tutorImage,
              currentUserImage: 'path_to_student_image', // Replace with actual student image path
            ),
          ),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to send message: ${responseData['message']}')),
        );
      }
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to send message: ${response.body}')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Tutoring Schedule'),
        backgroundColor: Colors.blue[800],
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Tutor: ${widget.tutorName}'), // Display tutor name
            SizedBox(height: 20),
            TableCalendar(
              calendarFormat: _calendarFormat,
              focusedDay: _focusedDay,
              firstDay: DateTime.utc(2024, 1, 1),
              lastDay: DateTime.utc(2024, 12, 31),
              selectedDayPredicate: (day) {
                return isSameDay(selectedDay, day);
              },
              onDaySelected: (selectedDay, focusedDay) {
                setState(() {
                  this.selectedDay = selectedDay;
                });
              },
              onPageChanged: (focusedDay) {
                _focusedDay = focusedDay;
              },
            ),
            SizedBox(height: 20),
            Row(
              children: [
                Text('Start Time: '),
                Expanded(
                  child: TextField(
                    controller: startTimeController,
                    readOnly: true,
                    onTap: () {
                      _selectTime(context, true);
                    },
                    decoration: InputDecoration(
                      hintText: 'Select Start Time',
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
              ],
            ),
            SizedBox(height: 10),
            Row(
              children: [
                Text('End Time: '),
                Expanded(
                  child: TextField(
                    controller: endTimeController,
                    readOnly: true,
                    onTap: () {
                      _selectTime(context, false);
                    },
                    decoration: InputDecoration(
                      hintText: 'Select End Time',
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
              ],
            ),
            SizedBox(height: 10),
            Text('Price rate'),
            ListView.builder(
              shrinkWrap: true,
              physics: NeverScrollableScrollPhysics(),
              itemCount: rates.length,
              itemBuilder: (context, index) {
                return RadioListTile<int>(
                  title: Text('${rates[index]['people']} คน | ราคา ${rates[index]['price']} บาท'),
                  value: rates[index]['people'],
                  groupValue: selectedRate,
                  onChanged: (int? value) {
                    setState(() {
                      selectedRate = value!;
                    });
                  },
                );
              },
            ),
            SizedBox(height: 20),
            Center(
              child: ElevatedButton(
                onPressed: _scheduleSession,
                style: ButtonStyle(
                  backgroundColor: MaterialStateProperty.all<Color>(Colors.blue),
                ),
                child: Text('Schedule'),
              ),
            ),
          ],
        ),
      ),
      bottomNavigationBar: BottomNavigationBar(
        items: [
          BottomNavigationBarItem(
            icon: Icon(Icons.home, color: Colors.blue),
            label: 'Home',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.chat, color: Colors.green),
            label: 'Chat',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.notifications, color: Colors.red),
            label: 'Notifications',
          ),
        ],
        onTap: (index) {
          // Handle tap events
        },
      ),
    );
  }
}
